// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/derlaft/ratecounter/iface (interfaces: Counter,CounterFactory)

// Package counter_mocks is a generated GoMock package.
package counter_mocks

import (
	iface "github.com/derlaft/ratecounter/iface"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	time "time"
)

// MockCounter is a mock of Counter interface
type MockCounter struct {
	ctrl     *gomock.Controller
	recorder *MockCounterMockRecorder
}

// MockCounterMockRecorder is the mock recorder for MockCounter
type MockCounterMockRecorder struct {
	mock *MockCounter
}

// NewMockCounter creates a new mock instance
func NewMockCounter(ctrl *gomock.Controller) *MockCounter {
	mock := &MockCounter{ctrl: ctrl}
	mock.recorder = &MockCounterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCounter) EXPECT() *MockCounterMockRecorder {
	return m.recorder
}

// Count mocks base method
func (m *MockCounter) Count() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count")
	ret0, _ := ret[0].(int)
	return ret0
}

// Count indicates an expected call of Count
func (mr *MockCounterMockRecorder) Count() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockCounter)(nil).Count))
}

// Incr mocks base method
func (m *MockCounter) Incr() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Incr")
}

// Incr indicates an expected call of Incr
func (mr *MockCounterMockRecorder) Incr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Incr", reflect.TypeOf((*MockCounter)(nil).Incr))
}

// Save mocks base method
func (m *MockCounter) Save() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Save indicates an expected call of Save
func (mr *MockCounterMockRecorder) Save() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockCounter)(nil).Save))
}

// MockCounterFactory is a mock of CounterFactory interface
type MockCounterFactory struct {
	ctrl     *gomock.Controller
	recorder *MockCounterFactoryMockRecorder
}

// MockCounterFactoryMockRecorder is the mock recorder for MockCounterFactory
type MockCounterFactoryMockRecorder struct {
	mock *MockCounterFactory
}

// NewMockCounterFactory creates a new mock instance
func NewMockCounterFactory(ctrl *gomock.Controller) *MockCounterFactory {
	mock := &MockCounterFactory{ctrl: ctrl}
	mock.recorder = &MockCounterFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCounterFactory) EXPECT() *MockCounterFactoryMockRecorder {
	return m.recorder
}

// Load mocks base method
func (m *MockCounterFactory) Load(arg0, arg1 time.Duration, arg2 []byte) (iface.Counter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Load", arg0, arg1, arg2)
	ret0, _ := ret[0].(iface.Counter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Load indicates an expected call of Load
func (mr *MockCounterFactoryMockRecorder) Load(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Load", reflect.TypeOf((*MockCounterFactory)(nil).Load), arg0, arg1, arg2)
}

// New mocks base method
func (m *MockCounterFactory) New(arg0, arg1 time.Duration) iface.Counter {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "New", arg0, arg1)
	ret0, _ := ret[0].(iface.Counter)
	return ret0
}

// New indicates an expected call of New
func (mr *MockCounterFactoryMockRecorder) New(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "New", reflect.TypeOf((*MockCounterFactory)(nil).New), arg0, arg1)
}
